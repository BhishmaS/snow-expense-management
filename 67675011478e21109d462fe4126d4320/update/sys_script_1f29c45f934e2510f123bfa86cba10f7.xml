<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_snc_expense_mng_expense_core</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Category Rules Validation</name>
        <order>200</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/ ) {

    try {
        var isValidExpense = true;
        // Validating the limints of past 30 days OR a month
        if (current.category.limit_amount_per_month || current.category.limit_instances_per_month) {
            // Aggregated result storage of past expenses
            var pastExpsCount = Number(0);
            var pastExpsAmount = Number(0);

            // Query to get expenses of past 30 days for current 'requested_for' User
            var pastExpsQuery = 'sys_created_onONLast 30 days@javascript:gs.beginningOfLast30Days()'
					+ '@javascript:gs.endOfLast30Days()^sys_id!=' + current.sys_id
					+'^requested_for=' + current.requested_for;
			
            // Calculating aggregates of expenses
            var expsGR = new GlideRecord('x_snc_expense_mng_expense');
            expsGR.addEncodedQuery(pastExpsQuery);
            expsGR.query();
            while (expsGR.next()) {
                pastExpsCount++;
                pastExpsAmount += Number(expsGR.getValue('amount'));
            }

            // Calculating aggregates of advance expenses
            var advExpsGR = new GlideRecord('x_snc_expense_mng_advance_expense');
            advExpsGR.addEncodedQuery(pastExpsQuery);
            advExpsGR.query();
            while (advExpsGR.next()) {
                pastExpsCount++;
                pastExpsAmount += Number(advExpsGR.getValue('amount'));
            }

            if (current.category.limit_amount_per_month) {
                var amountPerMonth = current.category.allowed_amount_per_month;
                if (pastExpsAmount >= amountPerMonth) {
                    gs.addErrorMessage('Max amount allowed per month is ' + amountPerMonth);
                    isValidExpense = false;
                }
            }

            if (current.category.limit_instances_per_month) {
                var instancesPerMonth = current.category.allowed_instances_per_month;
                if (pastExpsCount > instancesPerMonth) {
                    gs.addErrorMessage('Max instances allowed per month are ' + instancesPerMonth);
                    isValidExpense = false;
                }
            }
        }

        // Required note rule validation
        var note_for_amount_exceeding = current.category.require_note_for_amount_exceeding;
        if (current.category.require_note &&
            current.amount > note_for_amount_exceeding &&
            current.note.nil()) {
            gs.addErrorMessage('Note is required for amount exceeding ' + note_for_amount_exceeding);
            isValidExpense = false;
        }

        // Required receipt rule validation
        // 	// Need to fix receipts issue
        // 	var receipt_for_amount_exceeding = current.category.require_receipt_for_amount_exceeding;
        // 	if (current.category.require_receipt &&
        // 		current.amount > receipt_for_amount_exceeding &&
        // 		current.receipts.nil()) {
        // 		gs.addErrorMessage('Note is required for amount exceeding ' + receipt_for_amount_exceeding);
        // 		isValidExpense = false;
        // 	}

        // Aborting the action if expense is invalid
        if (!isValidExpense)
            current.setAbortAction(true);
    } catch (err) {
        gs.error("Expenses: A runtime error occurred" + err);

        gs.addErrorMessage("An error occurred while saving the expense");
        current.setAbortAction(true);
    }

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>bhishma.sukhavasi@snc</sys_created_by>
        <sys_created_on>2023-04-12 01:11:57</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>1f29c45f934e2510f123bfa86cba10f7</sys_id>
        <sys_mod_count>42</sys_mod_count>
        <sys_name>Category Rules Validation</sys_name>
        <sys_overrides/>
        <sys_package display_value="Expense Management" source="x_snc_expense_mng">67675011478e21109d462fe4126d4320</sys_package>
        <sys_policy/>
        <sys_scope display_value="Expense Management">67675011478e21109d462fe4126d4320</sys_scope>
        <sys_update_name>sys_script_1f29c45f934e2510f123bfa86cba10f7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-04-13 03:56:28</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=1f29c45f934e2510f123bfa86cba10f7"/>
</record_update>
